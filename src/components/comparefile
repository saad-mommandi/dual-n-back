<script setup>
import { ref, onBeforeUnmount } from 'vue';
import logo from '@/assets/img/logo.jfif';

// Create a 3x3 grid initialized to false (no images shown)
const grid = ref(Array(9).fill(false));
let intervalId = null;

// Array to store the history of grid positions and letters spoken
const history = ref([]);

// Dynamically import the audio files for each letter of the alphabet
const letterSounds = [
  { letter: 'A', sound: new Audio(new URL('@/assets/sounds/A.mp3', import.meta.url)) },
  { letter: 'B', sound: new Audio(new URL('@/assets/sounds/B.mp3', import.meta.url)) },
  { letter: 'C', sound: new Audio(new URL('@/assets/sounds/C.mp3', import.meta.url)) },
  // Continue for other letters...
  { letter: 'Z', sound: new Audio(new URL('@/assets/sounds/Z.mp3', import.meta.url)) }
];

// Function to play a random letter sound and return the letter
function playRandomLetterSound() {
  const randomIndex = Math.floor(Math.random() * letterSounds.length);
  const letterObj = letterSounds[randomIndex];
  letterObj.sound.play();
  return letterObj.letter;
}

// Function to briefly clear the grid before showing an image in a random position
function showRandomImage() {
  grid.value = Array(9).fill(false);

  setTimeout(() => {
    const randomIndex = Math.floor(Math.random() * 9);
    grid.value[randomIndex] = true;

    // Play a random letter sound and get the letter
    const letter = playRandomLetterSound();

    // Store the grid position and corresponding letter in the history array
    history.value.push([randomIndex, letter]);
  }, 200);  // Adjust this timeout duration as needed for the desired flash effect
}

// Function to start the interval
function startInterval() {
  if (!intervalId) {
    intervalId = setInterval(showRandomImage, 1000);
  }
}

// Function to stop the interval and clear the grid
function clearGrid() {
  clearInterval(intervalId);
  intervalId = null;
  grid.value = Array(9).fill(false);
  // Optionally, you can clear the history when the grid is cleared
  // history.value = [];
}

// Clear the interval when the component is destroyed
onBeforeUnmount(() => {
  clearInterval(intervalId);
});
</script>

<template>
  <div class="flex flex-col justify-center items-center h-screen">
    <div class="grid grid-cols-3 gap-2 w-72 h-72 mb-4">
      <div 
        v-for="(isVisible, index) in grid" 
        :key="index" 
        class="border flex justify-center items-center w-24 h-24"
      >
        <img v-if="isVisible" :src="logo" alt="Logo" class="w-16 h-16"/>
      </div>
    </div>
    <div>
      <button @click="startInterval" class="px-4 py-2 bg-green-500 text-white rounded mr-2">START</button>
      <button @click="clearGrid" class="px-4 py-2 bg-red-500 text-white rounded">CLEAR</button>
    </div>
  </div>
</template>

<style scoped>
/* Scoped styles if any additional custom styling is needed */
</style>
